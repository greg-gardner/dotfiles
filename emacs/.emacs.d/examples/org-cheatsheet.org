
#+STARTUP: overview  //{overview, content, showall}.  Use C-c C-c to change.

* Shortcuts
** Motion
C-c C-n
    Next heading. 
C-c C-p
    Previous heading. 
C-c C-f
    Next heading same level. 
C-c C-b
    Previous heading same level. 
C-c C-u
Backward to higher level heading. 
** Edit Structure
M-RET
    Insert new heading with same level as current. If the cursor is in a plain list item, a new item is created (see Plain lists). When this command is used in the middle of a line, the line is split and the rest of the line becomes the new headline2.
M-S-RET
    Insert new TODO entry with same level as current heading. 
TAB in new, empty entry
    In a new entry with no text yet, TAB will cycle through reasonable levels. 
M-left/right
    Promote/demote current heading by one level. 
M-S-left/right
    Promote/demote the current subtree by one level. 
M-S-up/down
    Move subtree up/down (swap with previous/next subtree of same level). 
C-c C-w
    Refile entry or region to a different location. See Refile and copy. 
C-x n s/w
    Narrow buffer to current subtree / widen it again 
    When there is an active region (Transient Mark mode), promotion and 
    demotion work on all headlines in the region. 
    
** Sparse Trees
   C-c /
   This prompts for an extra key to select a sparse-tree creating command. 
   C-c / r
   Search. Prompts for a regexp and shows a sparse tree with all matches. Each match is also highlighted; the highlights disappear by pressing C-c C-c. 
** Lists
TAB
    Items can be folded just like headline levels. 
M-RET
    Insert new item at current level. With a prefix argument, force a new heading (see Structure editing). 
M-S-RET
    Insert a new item with a checkbox (see Checkboxes). 
M-S-up/down
    Move the item including subitems up/down (swap with previous/next item of same indentation). If the list is ordered, renumbering is automatic. 
M-left/M-right
    Decrease/increase the indentation of an item, leaving children alone. 
M-S-left/right
    Decrease/increase the indentation of the item, including subitems. 
C-c C-c
    If there is a checkbox (see Checkboxes) in the item line, toggle the state of the checkbox. Also verify bullets and indentation consistency in the whole list. 
C-c -
    Cycle the entire list level through the different itemize/enumerate bullets (‘-’, ‘+’, ‘*’, ‘1.’, ‘1)’). 
* Structure
  [[https://orgmode.org/manual/Document-structure.html#Document-structure]]
** Drawers
   [[https://orgmode.org/manual/Drawers.html#Drawers]]
   Sometimes you want to keep information associated with an entry, but you 
   normally don’t want to see it. For this, Org mode has drawers. They can 
   contain anything but a headline and another drawer. Drawers look like 
   this:

*** This is a headline
    Still outside the drawer
    :DRAWERNAME:
    This is inside the drawer.
    :END:
    After the drawer.

    You can interactively insert drawers at point by calling org-insert-drawer, 
    which is bound to C-c C-x d. With an active region, this command will put 
    the region inside the drawer. With a prefix argument, this command calls 
    org-insert-property-drawer and add a property drawer right below the 
    current headline. Completion over drawer keywords is also possible using M-TAB.
    
    Visibility cycling (see Visibility cycling) on the headline will hide 
    and show the entry, but keep the drawer collapsed to a single line. In 
    order to look inside the drawer, you need to move the cursor to the 
    drawer line and press TAB there. Org mode uses the PROPERTIES drawer 
    for storing properties (see Properties and columns), and you can also 
    arrange for state change notes (see Tracking TODO state changes) and 
    clock times (see Clocking work time) to be stored in a drawer LOGBOOK. 
    If you want to store a quick note in the LOGBOOK drawer, in a similar 
    way to state changes, use

    C-c C-z
    Add a time-stamped note to the LOGBOOK drawer. 

    You can select the name of the drawers which should be exported with 
    org-export-with-drawers. In that case, drawer contents will appear in 
    export output. Property drawers are not affected by this variable: 
    configure org-export-with-properties instead. 

** Blocks
   https://orgmode.org/manual/Blocks.html#Blocks
   [[https://orgmode.org/manual/Literal-examples.html#Literal-examples]]
   #+BEGIN_EXAMPLE
   ...
   #+END_EXAMPLE
*** Easy Templates
   [[https://www.gnu.org/software/emacs/manual/html_node/org/Easy-Templates.html]]
  
* Lists
{- + * 1. 1}
** example 
   LOTR example 
   1. The attack of the Rohirrim
   2. Eowyn's fight with the witch king
      * this was already my favorite scene in the book
      * I really like Miranda Otto.
      * [X] Checkbox
       	+ C-c C-c
   Important actors in this film are:
   - Elijah Wood :: He plays Frodo
     - Sean Astin :: He plays Sam, Frodo's friend.
** Checkboxes
Must be in list. 
- [X] check the box w/ C-c C-c
- M-S-RET  makes new checkbox (inside list only)
* Footnotes
  This content has a footnote[fn:1]
** Shortcuts
   C-c C-x f
   The footnote action command. When the cursor is on a footnote reference, jump to the definition. When it is at a definition, jump to the (first) reference. Otherwise, create a new footnote. When this command is called with a prefix argument, a menu of additional options including renumbering is offered.
   C-c C-c
   Jump between definition and reference. 

[fn:1] A footnote!

* Tables
  + https://orgmode.org/guide/Tables.html#Tables
  + Spreadsheet-like calculations are supported in connection with the Emacs calc package
  + Use TAB

| Name | Phone | Age |
|------+-------+-----|
| Greg |  1234 |  28 |
| Erin |  4321 |  26 |
|      |       |     |
   
** Shortcuts
C-c |
    Convert the active regi0on to table. If every line contains at least 
    one TAB character, the function assumes that the material is tab 
    separated. If every line contains a comma, comma-separated values (CSV) 
    are assumed. If not, lines are split at whitespace into fields.
    If there is no active region, this command creates an empty Org table. 
    But it’s easier just to start typing, like |Name|Phone|Age C-c RET.
C-c C-c
    Re-align the table without moving the cursor. 
TAB
    Re-align the table, move to the next field. Creates a new row if necessary. 
S-TAB
    Re-align, move to previous field. 
RET
    Re-align the table and move down to next row. Creates a new row if necessary.
M-left
M-right
    Move the current column left/right. 
M-S-left
    Kill the current column. 
M-S-right
    Insert a new column to the left of the cursor position. 
M-up
M-down
    Move the current row up/down. 
M-S-up
    Kill the current row or horizontal line. 
M-S-down
    Insert a new row above the current row. With a prefix argument, the 
    line is created below the current one. 
C-c -
    Insert a horizontal line below current row. With a prefix argument, the 
    line is created above the current line. 
C-c RET
    Insert a horizontal line below current row, and move the cursor into 
    the row below that line. 
C-c ^
    Sort the table lines in the region. The position of point indicates the 
    column to be used for sorting, and the range of lines is the range 
    between the nearest horizontal separator lines, or the entire table.
** TODO Sweet Example Function
#+NAME: todoOverview
#+BEGIN_SRC emacs-lisp
;; (org-src-debug) ;;< Remove first comment starters to use the debugging code from https://emacs.stackexchange.com/questions/13244/edebug-orgmode-source-code-blocks-with-input-variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following wrapper enables us to run the code
;; - by evaluating the source code block within the org-file and also
;; - by evaluating the form in the source edit buffer.
(with-current-buffer
    (or (and (org-src-edit-buffer-p) (org-src--source-buffer))
        (current-buffer))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; The actual code starts here:
  (let* ((ast (org-element-parse-buffer)) ;; built up the abstract syntax tree of the org buffer
         item-types ; all occuring item types. It could be that some task has more item types than another.
         tasks ; accumulation list for the tasks
         current-task ; name of the current task (header of level 1)
         task-items) ; items of the current task
    (org-element-map ast 'headline
      (lambda (hl)
        (cl-case (org-element-property :level hl)
          (1 ; We assume here that headers of level 1 are tasks.
           (when current-task ; registering the old task
             (setq tasks (cons (cons current-task (nreverse task-items)) tasks)))
           (setq current-task (org-element-property :raw-value hl) ; preparing the new task
                 task-items nil))
          (2 ; item
           (let ((item-type (org-element-property :raw-value hl)))
             (setq item-types (cons item-type item-types))
             (setq task-items (cons (cons item-type (org-element-property :todo-keyword hl))
                                    task-items)))))))
    (setq tasks (nreverse (cons (cons current-task (nreverse task-items)) tasks)) ;< add the last task
          item-types (sort (cl-remove-duplicates (nreverse item-types) :test 'string-equal) ; list of unique item types
                           #'string<)) ;;< Sorting the items lexicographical. Other criteria could be applied.
    ;;;;;;;;;;
    ;; generating the output table:
    (apply
     #'list
     (cons "Item" (mapcar #'car tasks)) ; header
     'hline
     ;; rows:
     (mapcar
      ;; mapping the items to the todo states associated to the tasks:
      (lambda (item-type)
        (cons item-type
              (mapcar
               (lambda (task)
                 (let ((todo-status (cdr (assoc-string item-type task))))
                   todo-status))
               tasks)))
      item-types))))
#+END_SRC
#+RESULTS: todoOverview
  | Item | Task 1 [2/2] | Task 2 [1/2] | Task 3 [0/2] |
  |------+--------------+--------------+--------------|
  | I 1  | DONE         | DONE         | TODO         |
  | I 2  | DONE         | TODO         | TODO         |
  | I 3  | nil          | TODO         | nil          |
  |      |              |              |              |
  
* Hyperlinks
  [[]] []
  https://orgmode.org/guide/Link-format.html#Link-format
  [[https://orgmode.org/guide/Link-format.html#Link-format][same-hyperlink-with-description]]
** Internal Links
   ‘[[#my-custom-id]]’ will link to the entry with the CUSTOM_ID property ‘my-custom-id’. 
  
   [[My target]] does text search in the current file for the first occurrance
   of ‘<<My Target>>’. 

** Targete Links
   [[file:~/.bashrc:4]]                 Find line 255
   [[file:~/xx.org::My%20Target][file:~/xx.org::My Target]]         Find ‘<<My Target>>’
   [[file:~/xx.org::#my-custom-id]]     Find entry with custom id
** Shortcut
C-c l
    Store a link to the current location for use with C-c C-l
C-c C-l
    Insert a link. This prompts for a link to be inserted into the buffer. 
    You can just type a link, or use history keys up and down to access 
    stored links. You will be prompted for the description part of the link. When called with a C-u prefix argument, file name completion is used to link to a file. 
C-c C-l (with cursor on existing link)
    When the cursor is on an existing link, C-c C-l allows you to edit the 
    link and description parts of the link. 
C-c &
    Jump back to a recorded position. A position is recorded by the 
    commands following internal links, and by C-c %. Using this command several times in direct succession moves through a ring of previously recorded positions. 

* 'TODO' 
** Examples
*** TODO wash car
*** TODO grad school
*** DONE walk dog
    CLOSED: [2018-03-26 Mon 15:24]
    - CLOSING NOTE [2018-03-26 Mon 15:24] \\
      This is an example closed note.    
** Shortcuts
C-c C-t
    Rotate the TODO state of the current item among
    (unmarked) -> TODO -> DONE -> (unmarked)
    The same rotation can also be done “remotely” from the agenda buffers 
    with the t command key (see Agenda commands).
S-right/left
    Select the following/preceding TODO state, similar to cycling. 
C-c / t
    View TODO items in a sparse tree (see Sparse trees). Folds the buffer, 
    but shows all TODO items and the headings hierarchy above them. 
C-c a t
    Show the global TODO list. Collects the TODO items from all agenda 
    files (see Agenda Views) into a single buffer. See Global TODO list, 
    for more information. 
S-M-RET
    Insert a new TODO entry below the current one. 

Changing a TODO state can also trigger tag changes. See the docstring of 
the option org-todo-state-tags-triggers for details. 
** Multi-State Workflows

(setq org-todo-keywords
  '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

The vertical bar separates the TODO keywords (states that need action) from 
the DONE states (which need no further action). If you don’t provide the 
separator bar, the last state is used as the DONE state. With this setup, 
the command C-c C-t will cycle an entry from TODO to FEEDBACK, then to 
VERIFY, and finally to DONE and DELEGATED. Sometimes you may want to use 
different sets of TODO keywords in parallel. For example, you may want to 
have the basic TODO/DONE, but also a workflow for bug fixing. Your setup 
would then look like this: 

(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")))

The keywords should all be different, this helps Org mode to keep track of 
which subsequence should be used for a given entry. The example also shows 
how to define keys for fast access of a particular state, by adding a 
letter in parenthesis after each keyword—you will be prompted for the key 
after C-c C-t. 

To define TODO keywords that are valid only in a single file, use the 
following text anywhere in the file.

#+TODO: TODO(t) | DONE(d)
#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
#+TODO: | CANCELED(c)

After changing one of these lines, use C-c C-c with the cursor still in the 
line to make the changes known to Org mode. 
** Progress Logging
Org mode can automatically record a timestamp and possibly a note when you 
mark a TODO item as DONE, or even each time you change the state of a TODO 
item. This system is highly configurable; settings can be on a per-keyword 
basis and can be localized to a file or even a subtree. For information on 
how to clock working time for a task, see Clocking work time.
*** Closing Items
The most basic logging is to keep track of when a certain TODO item was 
finished. This is achieved with:

(setq org-log-done 'time)
OR
' #+STARTUP: logdone  '

Then each time you turn an entry from a TODO (not-done) state into any of 
the DONE states, a line ‘CLOSED: [timestamp]’ will be inserted just after 
the headline. If you want to record a note along with the timestamp, use

(setq org-log-done 'note)
OR
' #+STARTUP: lognotedone '

You will then be prompted for a note, and that note will be stored below the 
entry with a ‘Closing Note’ heading. 

*** Tracking TODO State Changes

CLOSING NOTES will be inserted after the headline as an itemized list. When 
taking a lot of notes, you might want to get the notes out of the way into 
a drawer. Customize the variable org-log-into-drawer to get this behavior. 

For state logging, Org mode expects configuration on a per-keyword basis. 
This is achieved by adding special markers ‘!’ (for a timestamp) and ‘@’ 
(for a note) in parentheses after each keyword. For example:

' #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)' 

** Priorities
Prioritizing a TODO can be done by placing a priority cookie into the 
headline of a TODO item, like this:

*** TODO [#A] Write letter to Sam Fortune

S-up/dwn
    Increase/decrease priority of current headline 
** Breaking Down Tasks
Create outline tree below a TODO item. 
Insert either ‘[/]’ or ‘[%]’ anywhere in the headline

*** Organize Party [25%]
**** TODO Call people [1/2]
***** TODO Peter
***** DONE Sarah
**** TODO Buy food
**** DONE Talk to neighbor

Using a checlkist instead:
*** TODO Organize party [1/3]
    - [-] call people [1/2]
      - [ ] Peter
      - [X] Sarah
    - [X] order food
* Tags								       :tags:
Appended to headlines. Ex:  :tag1:tag2:
** Tag Inheritance
Subheadings inherit the parent's tags.

Globall tag for all headings:
' #+FILETAGS: :inherited:by:all: '
** Setting Tags
Tab complete is your friend.
C-c C-q
C-c C-c
   Same thing, but inline.
** Tag Groups
Create a @read group:
' #+TAGS: { @read : @read_book  @read_ebook } '
*** Disable
Ignore group tags:
org-toggle-tags-groups, bound to C-c C-x q

Disable group tags:  set org-group-tags to nil.
** Tag Search							     :agenda:
C-c \
C-c / m
  Create sparse tree search
C-c a m
    Create a global list of tag matches from all agenda files. See Matching 
    tags and properties. 
C-c a M
    Create a global list of tag matches from all agenda files, but check 
    only TODO items and force checking subitems (see variable org-tags-
    match-list-sublevels). 

These commands all prompt for a match string which allows basic Boolean 
logic like ‘+boss+urgent-project1’, to find entries with tags ‘boss’ and ‘
urgent’, but not ‘project1’, or ‘Kathy|Sally’ to find entries which are 
tagged, like ‘Kathy’ or ‘Sally’. The full syntax of the search string is 
rich and allows also matching against TODO keywords, entry levels and 
properties. For a complete description with many examples, see Matching 
tags and properties.
* Properties
Properties are key-value pairs associated with an entry. They live in a 
special drawer PROPERTIES:
:PROPERTIES:
:My_string: "a string"
:My_numbers_ALL: 7 25 89
:ccxp:     "C-c C-x p"
:END:
You may define the allowed values for a particular property ‘:Xyz:’ by 
setting a property ‘:Xyz_ALL:’. This special property is inherited, so if 
you set it in a level 1 entry, it will apply to the entire tree. When 
allowed values are defined, setting the corresponding property becomes 
easier and is less prone to typing errors. 
** Shortcuts 
C-c C-x p
    Set a property. This prompts for a property name and a value. 
C-c C-c d
Remove a property from the current entry. 
* Dates and Times
  TODO items can be labeled with a Org mode timestamp.
  [[https://orgmode.org/guide/Timestamps.html#Timestamps]]
** Timestamps
   A timestamp can appear anywhere in the headline or body of an Org tree 
   entry. Its presence causes entries to be shown on specific dates in the 
   agenda (see Weekly/daily agenda).
*** Shortcuts
C-c .
    Prompt for a date and insert a corresponding timestamp. When the cursor 
    is at an existing timestamp in the buffer, the command is used to modify 
    this timestamp instead of inserting a new one. When this command is used 
    twice in succession, a time range is inserted. With a prefix, also add the 
    current time. 
C-c !
    Like C-c ., but insert an inactive timestamp that will not cause an 
    agenda entry. 
S-left/right

    Change date at cursor by one day. 
S-up/down

    Change the item under the cursor in a timestamp. The cursor can be on a 
    year, month, day, hour or minute. When the timestamp contains a time 
    range like ‘15:30-16:30’, modifying the first time will also shift the 
    second, shifting the time block with constant length. To change the 
    length, modify the second time. 

When Org mode prompts for a date/time, it will accept any string containing some date and/or time information, and intelligently interpret the string, deriving defaults for unspecified information from the current date and time. You can also select a date in the pop-up calendar. See the manual for more information on how exactly the date/time prompt works. 
*** Basic
 <2006-11-01 Wed 19:15>
*** Repeater interval
A timestamp may contain a repeater interval, indicating that it applies not 
only on the given date, but again and again after a certain interval of N 
days (d), weeks (w), months (m), or years (y). The following will show up 
in the agenda every Wednesday:
 <2007-05-16 Wed 12:30 +1w>

*** Diary-style sexp entries
Org mode supports using the special sexp diary entries from the Emacs 
calendar/diary package. 
  <%%(diary-float t 4 2)>

*** Time/Date range
Two timestamps connected by ‘--’ denote a range.
   <2004-08-23 Mon>--<2004-08-26 Thu>

*** Inactive timestamp
Just like a plain timestamp, but with square brackets instead of angular 
ones. These timestamps are inactive in the sense that they do not trigger 
an entry to show up in the agenda.
  [2006-11-01 Wed]

** Deadlines and Scheduling
A timestamp may be preceded by special keywords to facilitate planning.
[[https://orgmode.org/guide/Deadlines-and-scheduling.html#Deadlines-and-scheduling][docs]]
*** Deadline
Meaning: the task (most likely a TODO item, though not necessarily) is 
supposed to be finished on that date.

C-c C-d
    Insert ‘DEADLINE’ keyword along with a stamp, in the line following 
    the headline. 

On the deadline date, the task will be listed in the agenda. In addition, 
the agenda for today will carry a warning about the approaching or missed 
deadline, starting org-deadline-warning-days before the due date, and 
continuing until the entry is marked DONE. An example:

**** TODO Example: write article about the Earth for the Guide
     The editor in charge is [[bbdb:Ford Prefect]]
     DEADLINE: <2004-02-29 Sun>

*** Scheduled
Meaning: you are planning to start working on that task on the given date.

C-c C-s
    Insert ‘SCHEDULED’ keyword along with a stamp, in the line following 
    the headline. 

The headline will be listed under the given date8. In addition, a 
reminder that the scheduled date has passed will be present in the 
compilation for today, until the entry is marked DONE. I.e. the task will 
automatically be forwarded until completed.

**** TODO Call Trillian for a date on New Years Eve.
    SCHEDULED: <2004-12-25 Sat>

Some tasks need to be repeated again and again. Org mode helps to 
organize such tasks using a so-called repeater in a DEADLINE, SCHEDULED, 
or plain timestamp. In the following example

**** TODO Pay the rent
   DEADLINE: <2005-10-01 Sat +1m>

The +1m is a repeater; the intended interpretation is that the task has a 
deadline on <2005-10-01> and repeats itself every (one) month starting 
from that time. 
*** Shortcuts
C-c C-d
    Insert ‘DEADLINE’ keyword along with a stamp, in the line following 
    the headline. 
C-c C-s
    Insert ‘SCHEDULED’ keyword along with a stamp, in the line following 
    the headline. 
** Clocking Work Time
   CLOCK: [2018-03-28 Wed 21:38]--[2018-03-28 Wed 21:43] =>  0:05
   :PROPERTIES:
   :Effort:   0:05
   :END:
Org mode allows you to clock the time you spend on specific tasks in a 
project.

C-c C-x C-i
    Start the clock on the current item (clock-in). This inserts the 
    CLOCK keyword together with a timestamp. When called with a C-u prefix 
    argument, select the task from a list of recently clocked tasks. 
C-c C-x C-o
    Stop the clock (clock-out). This inserts another timestamp at the 
    same location where the clock was last started. It also directly computes 
    the resulting time in inserts it after the time range as ‘=> HH:MM’. 
C-c C-x C-e
    Update the effort estimate for the current clock task. 
C-c C-x C-q
    Cancel the current clock. This is useful if a clock was started by 
    mistake, or if you ended up working on something else. 
C-c C-x C-j
    Jump to the entry that contains the currently running clock. With a C-
    u prefix arg, select the target task from a list of recently clocked tasks. 

C-c C-x C-r
    Insert a dynamic block containing a clock report as an Org-mode table 
    into the current file. When the cursor is at an existing clock table, 
    just update it.
    
    #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
    #+END: clocktable

    For details about how to customize this view, see the manual. 
C-c C-c
    Update dynamic block at point. The cursor needs to be in the #+BEGIN 
    line of the dynamic block. 

The l key may be used in the agenda (see Weekly/daily agenda) to show 
which tasks have been worked on or closed during a day. 

* Capture - Refile - Archive
  Org defines a capture process to create tasks. Once in the system, 
  tasks and projects need to be moved around. Moving completed project 
  trees to an archive file keeps the system compact and fast. 
** Capture
Org lets you store quick notes with little interruption of your work 
flow. You can define templates for new entries and associate them with 
different targets for storing notes. 
*** Setting a Capture Location
The following customization sets a default target file for notes, and 
defines a global key for capturing new stuff.

  (setq org-default-notes-file "/tmp/notes.org")
  (define-key global-map "\C-cc" 'org-capture)

*** Shortcuts
C-c c
    Start a capture process, placing you into a narrowed indirect buffer 
    to edit. 
C-c C-c
    Once you are done entering information into the capture buffer, C-c C-c
    will return you to the window configuration before the capture 
    process, so that you can resume your work without further distraction. 
C-c C-w
    Finalize by moving the entry to a refile location (see section 9.2). 
C-c C-k
    Abort the capture process and return to the previous state. 
*** Capture Templates
You can use templates to generate different types of capture notes, and 
to store them in different places. 
[[https://orgmode.org/guide/Capture-templates.html#Capture-templates]]

For example, if you would like to store new tasks under a heading ‘Tasks’ 
in file TODO.org, and journal entries in a date tree in journal.org you 
could use:

(setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
   ("j" "Journal" entry (file+datetree "~/org/journal.org")
   "* %?\nEntered on %U\n  %i\n  %a")))
** Archive   When a project represented by a (sub)tree is finished, you may want to move the tree out of the way and to stop it from contributing to the agenda. Archiving is important to keep your working files compact and global searches like the construction of agenda views fast. The most common archiving action is to move a project tree to another file, the archive file.
   When a project represented by a (sub)tree is finished, you may want to move 
   the tree out of the way and to stop it from contributing to the agenda. 
   Archiving is important to keep your working files compact and global 
   searches like the construction of agenda views fast. The most common 
   archiving action is to move a project tree to another file, the archive 
   file.

C-c C-x C-a
    Archive the current entry using org-archive-default-command. 
C-c C-x C-s or short  C-c $
    Archive the subtree starting at the cursor position to the location 
    given by org-archive-location. 

    The default archive location is a file in the same directory as the current 
    file, with the name derived by appending _archive to the current file name. For information and examples on how to change this, see the documentation string of the variable org-archive-location. There is also an in-buffer option for setting this variable, for example

    '  #+ARCHIVE: %s_done:: '
* Agenda Views
  [[https://orgmode.org/guide/Agenda-files.html]]
** Agenda files
   The information to be shown is normally collected from all agenda files, 
   the files listed in the variable org-agenda-files.
   
   C-c [
   Add current file to the list of agenda files. The file is added to 
   the front of the list. If it was already in the list, it is moved to the 
   front. With a prefix argument, file is added/moved to the end. 
   C-c ]
   Remove current file from the list of agenda files. 
   C-,
   Cycle through agenda file list, visiting one file after the other. 
** Agenda Dispatcher
   The views are created through a dispatcher, which should be bound to a 
   global key—for example C-c a (see Installation).

   t
   Toggle todo state.

** Agenda Views (built-in)
*** Weekly Agenda
    The purpose of the weekly/daily agenda is to act like a page of a paper 
    agenda, showing all the tasks for the current week or day.

    C-c a a
    Compile an agenda for the current week from a list of Org files. The 
    agenda shows the entries for each day. 

    Emacs contains the calendar and diary by Edward M. Reingold. Org-mode 
    understands the syntax of the diary and allows you to use diary sexp 
    entries directly in Org files:

**** Birthdays and similar stuff
     #+CATEGORY: Holiday
     %%(org-calendar-holiday)   ; special function for holiday names
     #+CATEGORY: Ann
     %%(diary-anniversary  5 14 1956)(11) Arthur Dent is %d years old
     %%(diary-anniversary 10  2 1869) Mahatma Gandhi would be %d years old
     
     Org can interact with Emacs appointments notification facility. To add 
     all the appointments of your agenda files, use the command org-agenda-to-
     appt. See the docstring for details. 
*** Global TODO
    The global TODO list contains all unfinished TODO items formatted and 
    collected into a single place. Remote editing of TODO items lets you 
    change the state of a TODO entry with a single key press. The 
    commands available in the TODO list are described in Agenda commands. 
